type: edu
custom_name: stage4
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import budget.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        public BudgetManagerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n1000\n2\n" +
                        "1\nAlmond 250g\n35.43\n" +
                        "1\nMilk\n3.50\n" +
                        "1\nRed Fuji Apple\n5.99\n" +
                        "1\nEggs\n3.99\n" +
                        "1\nFIJI Natural Artesian Water\n25.98\n" +
                        "1\nHershey's milk chocolate bars\n8.54\n" +
                        "1\nGreat Value Broccoli Florets\n1.00\n" +
                        "1\nKeystone Ground Bee\n6.28\n" +
                        "2\nGildan LT\n8.61\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                        "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                        "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                        "3\nCinema\n8.73\n" +
                        "3\nSkate rental\n30\n" +
                        "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                        "4\nChick-fil-A $10 Gift Card\n10\n" +
                        "4\nDebt\n3.50\n" +
                        "5\n5\n0").setCheckFunc(BudgetManagerTest::test5),

                new TestCase<String>()
                    .setInput("6\n4\n3\n5\n1\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test6)
            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                    "Your program should create purchases.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 12\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                    "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28",
                "Gildan LT $8.61",
                "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                "Wrangler Men's Stretch Cargo Pant $19.97",
                "LEGO DUPLO Town Farm Animals $10.10",
                "Cinema $8.73",
                "Skate rental $30.00",
                "Sensodyne Pronamel Toothpaste $19.74",
                "Chick-fil-A $10 Gift Card $10.00",
                "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your all purchases list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of all purchases is wrong. Expected:\n" +
                        "Total sum: $214.36\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[] {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your food list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of food list is wrong. Expected:\n" +
                        "Total sum: $90.71\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/Menu.java
  visible: true
  text: |-
    package budget;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Menu {

        final static Scanner scanner = new Scanner(System.in);
        List<Good> goods;
        double balance;
        final static StringParser parser = new StringParser();
        List<Good> food;
        List<Good> clothes;
        List<Good> entertainment;
        List<Good> other;


        Menu() {
            goods = new ArrayList<>();
            balance = 0;
            food = new ArrayList<>();
            clothes = new ArrayList<>();
            entertainment = new ArrayList<>();
            other = new ArrayList<>();
        }

        public void process() {
            int choice;
            while (true) {
                System.out.println("Choose your action:");
                System.out.println("1) Add income");
                System.out.println("2) Add purchase");
                System.out.println("3) Show list of purchases");
                System.out.println("4) Balance");
                System.out.println("0) Exit");
                choice = Integer.parseInt(scanner.nextLine());
                System.out.println();
                switch (choice) {
                    case 1:
                        addIncome();
                        break;
                    case 2:
                        addPurchase();
                        break;
                    case 3:
                        showListOfPurchases();
                        break;
                    case 4:
                        balance();
                        break;
                    case 0:
                        System.out.println("Bye!");
                        return;
                }
                System.out.println();

            }
        }

        public void addIncome() {
            System.out.println("Enter income:");
            double income = Integer.parseInt(scanner.nextLine());
            balance += income;
            System.out.println("Income was added!");
        }

        public void addPurchase() {
            while (true) {
                System.out.println("Choose the type of purchase");
                System.out.println("1) Food");
                System.out.println("2) Clothes");
                System.out.println("3) Entertainment");
                System.out.println("4) Other");
                System.out.println("5) Back");
                int choice = Integer.parseInt(scanner.nextLine());
                System.out.println();
                Category category = null;

                switch (choice) {
                    case 1:
                        category = Category.FOOD;
                        break;
                    case 2:
                        category = Category.CLOTHES;
                        break;
                    case 3:
                        category = Category.ENTERTAINMENT;
                        break;
                    case 4:
                        category = Category.OTHER;
                        break;
                    case 5:
                        return;
                }
                System.out.println("Enter purchase name:");
                String name = scanner.nextLine();
                System.out.println("Enter its price:");
                double price = Double.parseDouble(scanner.nextLine());

                Good good = new Good(name, price, category);
                goods.add(good);
                switch (category) {
                    case FOOD:
                        food.add(good);
                        break;
                    case OTHER:
                        other.add(good);
                        break;
                    case CLOTHES:
                        clothes.add(good);
                        break;
                    case ENTERTAINMENT:
                        entertainment.add(good);
                        break;
                }
                balance -= price;
                System.out.println("Purchase was added!");
                System.out.println();
            }
        }

        public void showListOfPurchases() {
            if (goods.size() == 0) {
                System.out.println("Purchase list is empty");
                return;
            }
            while (true) {
            System.out.println("Choose the type of purchase");
            System.out.println("1) Food");
            System.out.println("2) Clothes");
            System.out.println("3) Entertainment");
            System.out.println("4) Other");
            System.out.println("5) All");
            System.out.println("6) Back");
            int choice = Integer.parseInt(scanner.nextLine());
            System.out.println();
            switch (choice) {
                case 1:
                    System.out.println("Food:");
                    showList(food);
                    break;
                case 2:
                    System.out.println("Clothes:");
                    showList(clothes);
                    break;
                case 3:
                    System.out.println("Entertainment:");
                    showList(entertainment);
                    break;
                case 4:
                    System.out.println("Other:");
                    showList(other);
                    break;
                case 5:
                    System.out.println("All:");
                    showList(goods);
                    break;
                case 6:
                    return;
            }
            }
        }

        private double sumOfPurchases(List<Good> list) {
            double answer = 0;
            for (Good g : list) {
                answer += g.price;
            }
            return answer;
        }

        public void balance() {
            if (balance <= 0) {
                System.out.println("Balance: $0.00");
            } else {
                System.out.println("Balance: $" + balance);
            }
        }

        public void showList(List<Good> list) {
            if (list.size() == 0) {
                System.out.println("Purchase list is empty");
            } else {
                for (Good g : list) {
                    System.out.println(g);
                }
                double sum = sumOfPurchases(list);
                System.out.println("Total sum: $" + sum);
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/budget/Category.java
  visible: true
  text: |
    package budget;

    public enum Category {
        FOOD,
        CLOTHES,
        ENTERTAINMENT,
        OTHER
    }
  learner_created: true
- name: src/budget/StringParser.java
  visible: true
  text: |
    package budget;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class StringParser {

        public double getPrice(String s) {
            Pattern javaPattern = Pattern.compile("\\$.*");
            Matcher matcher = javaPattern.matcher(s);
            matcher.find();
            String s1 = matcher.group();
            return Double.parseDouble(s1.substring(1, s1.length()));
        }

        public String getName(String s) {
            Pattern javaPattern = Pattern.compile(".*\\$");
            Matcher matcher = javaPattern.matcher(s);
            matcher.find();
            return matcher.group().substring(0, matcher.end() - 1).trim();
        }
    /*
        public int getPrice(String s) {
            String first = s.substring(0, s.length() - 3);
            String second = s.substring(s.length() - 2, s.length());
            return Integer.parseInt(first) * 100 + Integer.parseInt(second);
        }
    */
    }
  learner_created: true
- name: src/budget/Good.java
  visible: true
  text: |
    package budget;

    public class Good {
        String name;
        double price;
        Category category;

        public Good(String name, double price, Category category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }

        @Override
        public String toString() {
            return name + " $" + price;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/76/stages/424/implement#comment
status: Solved
record: 4
